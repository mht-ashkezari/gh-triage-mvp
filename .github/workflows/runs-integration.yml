name: Runs Integration

on:
  pull_request:
    branches: [main]
    paths:
      - "apps/runs/**"
      - "infra/sql/**"
      - ".github/workflows/runs-integration.yml"

permissions:
  contents: read

concurrency:
  group: runs-integration-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ghtriage
        ports: ["127.0.0.1:5432:5432"]
        options: >-
          --health-cmd "pg_isready -h 127.0.0.1 -U postgres -d ghtriage"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 30

      redis:
        image: redis:7
        ports: ["127.0.0.1:6379:6379"]
        # optional health check for parity with Postgres
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 30

    env:
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/ghtriage
      REDIS_URL: redis://127.0.0.1:6379
      RUNS_PORT: 4101
      RUNS_CONCURRENCY: 2

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm (binary)
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Setup Node.js (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            **/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Wait for Postgres (IPv4  credential check)
        shell: bash
        env:
          PGPASSWORD: postgres
        run: |
          set -euo pipefail
          echo "Waiting for Postgres on 127.0.0.1:5432/ghtriage as postgres..."
          for i in {1..60}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres -d ghtriage && break
            echo "Waiting for Postgres... ($i)"
            sleep 1
          done
          psql "postgresql://postgres:postgres@127.0.0.1:5432/ghtriage" -v ON_ERROR_STOP=1 -c "select 1;"

      - name: Wait for Redis (TCP)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..60}; do
            (echo > /dev/tcp/127.0.0.1/6379) >/dev/null 2>&1 && { echo "Redis is ready"; break; }
            echo "Waiting for Redis... ($i)"
            sleep 1
          done

      # Use the same idempotent script you run locally (002  020  021)
      - name: Apply schema (idempotent)
        run: pnpm -w db:prepare

      - name: Build workspace
        run: pnpm -w -r build

      - name: Start Runs and execute e2e
        run: pnpm -F @ghtriage/runs test:with-server

      - name: Upload Runs logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: runs-e2e-logs
          path: /tmp/runs.test.log
          if-no-files-found: warn
