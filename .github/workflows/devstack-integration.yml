---
name: DEVSTACK integration (local services)

on:
  pull_request:
    branches: [main]

jobs:
  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 20.19.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build CLI and test packages
        run: |
          pnpm -F @ghtriage/kpi-spec build
          pnpm -F @ghtriage/cli build
          pnpm -F @ghtriage/schemas build
          pnpm -F @ghtriage/contracts build
          pnpm -F @ghtriage/clients build
          pnpm -F @ghtriage/bff build

      - name: Start core stack
        run: |
          docker compose -f infra/docker/docker-compose.dev.yml up -d \
            postgres redis azurite otel-collector jaeger

      - name: Show container ports
        run: docker ps --format '{{.Names}}\t{{.Ports}}'

      - name: Discover Postgres host port
        id: pgport
        shell: bash
        run: |
          set -euo pipefail
          # Ask compose what host port maps to container:5432
          # Example output: "0.0.0.0:5432" or "127.0.0.1:5432"
          RAW="$(docker compose -f infra/docker/docker-compose.dev.yml port postgres 5432 || true)"
          PORT="$(awk -F: '{print $NF}' <<<"$RAW")"
          PORT="${PORT:-5432}"   # fallback if compose doesn't report
          echo "Resolved Postgres host port: ${PORT}"

          {
            echo "PGHOST=127.0.0.1"
            echo "PGPORT=${PORT}"
            echo "PGUSER=postgres"
            echo "PGDATABASE=ghtriage"  # <-- align with compose
            echo "PGPASSWORD=postgres"  # <-- align with compose
          } >> "$GITHUB_ENV"

      - name: Wait for services (pg_isready + Redis port)
        shell: bash
        run: |
          set -euo pipefail

          # Inside the container: readiness (uses DB ghtriage to match compose)
          for i in {1..60}; do
            if docker exec gh-triage-dev-postgres-1 pg_isready -U postgres -d ghtriage; then
              echo "Postgres (in-container) is ready"
              break
            fi
            sleep 1
          done

          # Redis on host port
          for i in {1..60}; do
            (echo > /dev/tcp/127.0.0.1/6379) >/dev/null 2>&1 && { echo "Redis is ready"; break; }
            sleep 1
          done

      - name: Wait for Postgres (IPv4 + credential check)
        shell: bash
        run: |
          set -euo pipefail

          echo "== docker port mappings =="
          docker ps --format '{{.Names}}\t{{.Ports}}'
          docker compose -f infra/docker/docker-compose.dev.yml port postgres 5432 || true
          echo "================================"

          echo "Waiting for Postgres on ${PGHOST}:${PGPORT}/${PGDATABASE} as ${PGUSER}..."
          for i in {1..90}; do
            pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" && break
            sleep 1
          done

          # final credentialed smoke query (hardcode host/port to dodge any stray env)
          psql -h 127.0.0.1 -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -v ON_ERROR_STOP=1 -c "select 1;"

      - name: Run DEVSTACK sanity tests
        env:
          DATABASE_URL: postgresql://${{ env.PGUSER }}:${{ env.PGPASSWORD }}@${{ env.PGHOST }}:${{ env.PGPORT }}/${{ env.PGDATABASE }}
          REDIS_URL: redis://localhost:6379
        run: pnpm test:bff:devstack

      - name: Collect compose logs
        if: always()
        run: docker compose -f infra/docker/docker-compose.dev.yml logs --no-color > devstack.log

      - uses: actions/upload-artifact@v4
        if: ${{ env.ACT != 'true' }}
        with:
          name: devstack-logs
          path: devstack.log
          if-no-files-found: ignore

      - name: Stop stack
        if: always()
        run: docker compose -f infra/docker/docker-compose.dev.yml down -v
