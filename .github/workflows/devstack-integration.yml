---
name: DEVSTACK integration (local services)

on:
  pull_request:
    branches: [main]

jobs:
  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 20.19.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build CLI and test packages
        run: |
          pnpm -F @ghtriage/kpi-spec build
          pnpm -F @ghtriage/cli build
          pnpm -F @ghtriage/schemas build
          pnpm -F @ghtriage/contracts build
          pnpm -F @ghtriage/clients build
          pnpm -F @ghtriage/bff build

      - name: Start core stack
        run: |
          docker compose -f infra/docker/docker-compose.dev.yml up -d \
            postgres redis azurite otel-collector jaeger

      - name: Wait for services (pg_isready + Redis port)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..60}; do
            if docker exec gh-triage-dev-postgres-1 pg_isready -U postgres -d triage; then
              echo "Postgres is ready"
              break
            fi
            sleep 1
          done

          for i in {1..60}; do
            (echo > /dev/tcp/127.0.0.1/6379) >/dev/null 2>&1 && { echo "Redis is ready"; break; }
            sleep 1
          done

      - name: Wait for Postgres (IPv4 + credential check)
        env:
          PGHOST: 127.0.0.1
          PGPORT: "55432"
          PGUSER: postgres
          PGDATABASE: triage
          PGPASSWORD: devpass
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting for Postgres on ${PGHOST}:${PGPORT}/${PGDATABASE} as ${PGUSER}..."
          for i in {1..60}; do
            pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" && break
            sleep 1
          done
          # final credentialed check + smoke query
          psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -v ON_ERROR_STOP=1 -c "select 1;"

      - name: Run DEVSTACK sanity tests
        env:
          DATABASE_URL: postgresql://postgres:devpass@localhost:55432/triage
          REDIS_URL: redis://localhost:6379
        run: pnpm test:bff:devstack

      - name: Collect compose logs
        if: always()
        run: docker compose -f infra/docker/docker-compose.dev.yml logs --no-color > devstack.log

      - uses: actions/upload-artifact@v4
        if: ${{ env.ACT != 'true' }}
        with:
          name: devstack-logs
          path: devstack.log
          if-no-files-found: ignore

      - name: Stop stack
        if: always()
        run: docker compose -f infra/docker/docker-compose.dev.yml down -v
